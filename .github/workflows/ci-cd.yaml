# Nombre del pipeline que aparecerá en la pestaña "Actions" de GitHub.
name: Pipeline de CI/CD para el Backend (Airflow)

# 'on' define los eventos que dispararán este pipeline.
on:
  # Se activa cuando se hace un 'push' (se sube código) a la rama 'main'.
  push:
    branches: [ main ]
  # También se activa cuando se crea o actualiza un 'Pull Request' que apunta a 'main'.
  pull_request:
    branches: [ main ]

# 'env' define variables de entorno que estarán disponibles para todos los trabajos del pipeline.
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/egi-backend

# 'jobs' define la secuencia de trabajos que se ejecutarán.
jobs:
  # -----------------------------------------------------------------
  # TRABAJO 1: PRUEBAS Y VALIDACIÓN (INTEGRACIÓN CONTINUA - CI)
  # -----------------------------------------------------------------
  test:
    name: Pruebas y Calidad de Código
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del código
        uses: actions/checkout@v4
      - name: Configurar Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pytest
      - name: Linting con Flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  # -----------------------------------------------------------------
  # TRABAJO 2: CONSTRUIR Y PUBLICAR LA IMAGEN (DESPLIEGUE CONTINUO - CD)
  # -----------------------------------------------------------------
  build-and-push:
    name: Construir y Publicar Imagen Docker
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout del código
        uses: actions/checkout@v4
      - name: Iniciar sesión en GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extraer metadata (etiquetas) para la imagen
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: type=sha,prefix=,format=short
      - name: Construir y publicar la imagen de Docker
        id: build_and_push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # -----------------------------------------------------------------
  # TRABAJO 3: ACTUALIZAR EL REPOSITORIO DE INFRAESTRUCTURA (GITOPS)
  # -----------------------------------------------------------------
  update-manifest:
    name: Actualizar Manifiesto de Desarrollo
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout del repositorio de infraestructura
        uses: actions/checkout@v4
        with:
          repository: Ml-For-Academic-Data/egi-infrastructure-k8s
          token: ${{ secrets.REPO_ACCESS_TOKEN }}

      - name: Actualizar el tag de la imagen para el ambiente de desarrollo
        run: |
          FULL_IMAGE_TAG=${{ needs.build-and-push.outputs.tags }}
          IMAGE_TAG_ONLY=${FULL_IMAGE_TAG##*:}

          echo "Actualizando a la nueva etiqueta de desarrollo: ${IMAGE_TAG_ONLY}"
          
          # --- CORRECCIÓN CLAVE ---
          # Apuntamos directamente al archivo de valores del ambiente de desarrollo.
          sed -i "s|tag:.*|tag: '"${IMAGE_TAG_ONLY}"'|g" charts/backend/values-desarrollo.yaml

      - name: Hacer Commit y Push de los cambios
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'github-actions-bot@github.com'
          
          # --- CORRECCIÓN CLAVE ---
          # Añadimos y hacemos commit del archivo correcto.
          git diff --quiet || (git add charts/backend/values-desarrollo.yaml && git commit -m "ci(backend): Actualiza imagen de desarrollo a ${{ github.sha }}" && git push)
